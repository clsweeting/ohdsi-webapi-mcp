[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ohdsi-webapi-mcp"
version = "0.1.0"
description = "Model Context Protocol (MCP) server for OHDSI WebAPI cohort building"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "Apache-2.0"
homepage = "https://github.com/clsweeting/ohdsi-webapi-mcp"
repository = "https://github.com/clsweeting/ohdsi-webapi-mcp"
keywords = ["ohdsi", "webapi", "cohort", "mcp", "model-context-protocol"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [{include = "ohdsi_webapi_mcp", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
mcp = "^1.0.0"
ohdsi-webapi-client = "^0.3.1"
ohdsi-cohort-schemas = "^0.1.0"
pydantic = "^2.0.0"
httpx = "^0.27.0"
fastapi-mcp = "^0.4.0"
uvicorn = {extras = ["standard"], version = "^0.35.0"}

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
ruff = "^0.8.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"

[tool.poetry.scripts]
ohdsi-webapi-mcp = "ohdsi_webapi_mcp.server:cli_main"
ohdsi-webapi-mcp-http = "ohdsi_webapi_mcp.http_server:main"

[tool.ruff]
line-length = 140
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=src --cov-report=term-missing --cov-report=xml"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "unit: marks tests as unit tests (fast, mocked dependencies)",
    "integration: marks tests as integration tests (slower, full server)",
    "slow: marks tests as slow running",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/scripts/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
